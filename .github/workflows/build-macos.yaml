name: Build macOS

on: [push, pull_request]
jobs:
  build_macos:
    runs-on: macos-latest
    steps:
    - name: Install Vulkan SDK
      run: |
        cd $RUNNER_WORKSPACE
        curl -L --show-error --output vulkansdk.zip https://sdk.lunarg.com/sdk/download/${VULKAN_SDK_VERSION}/mac/vulkansdk-macos-${VULKAN_SDK_VERSION}.zip?Human=true
        unzip vulkansdk.zip
        sudo ./InstallVulkan-${VULKAN_SDK_VERSION}.app/Contents/MacOS/InstallVulkan-${VULKAN_SDK_VERSION} in --al --c
        echo "VULKAN_SDK=${HOME}/VulkanSDK/${VULKAN_SDK_VERSION}/macOS" >> $GITHUB_ENV
      env:
        VULKAN_SDK_VERSION: '1.4.309.0'
    - name: Install Qt
      uses: jurplel/install-qt-action@v4
      with:
        cache: true
        cache-key-prefix: ${{ runner.os }}-${{ matrix.qt-arch }}-QtCache
    - name: Install AppDmg
      run: npm install -g appdmg
    - name: Checkout
      uses: actions/checkout@v3
      with:
        submodules: recursive
        fetch-depth: 0
    - name: Force Fetch Git Tags
      run: git fetch --tags --force
    - name: Set SHORT_HASH
      run: echo "VALUE=${LONG_HASH:0:8}" >> $GITHUB_OUTPUT
      id: short_hash
      env:
        LONG_HASH: ${{ github.sha }}
    - name: Generate CMake Project
      run: |
        mkdir build
        cd build
        cmake .. -G"Xcode" -DBUILD_LIBRETRO_CORE=yes "-DCMAKE_OSX_ARCHITECTURES=arm64;x86_64"
    - name: Build
      run: |
        cd build
        xcodebuild -project Play.xcodeproj build -target ALL_BUILD -configuration Release -arch x86_64 -arch arm64 ONLY_ACTIVE_ARCH=NO
        macdeployqt Source/ui_qt/Release/Play.app
    - name: Run Tests
      run: |
        cd build
        ctest -C Release
    - name: Prepare states DB
      run: |
        pip3 install requests
        python3 .github/CI_MISC/build_compatibility_db.py
        cp states.db build/Source/ui_qt/Release/Play.app/Contents/Resources/
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    - name: Sign And Notarize
      if: ${{ env.MACOS_DEVID_CERTIFICATE != null }}
      run: |
        ./.ci.macos.import_certificate.sh
        ./installer_macos/sign.sh
        ./.ci.macos.notarize.sh
      env:
        MACOS_DEVID_CERTIFICATE: ${{ secrets.MACOS_DEVID_CERTIFICATE }}
        MACOS_DEVID_CERTIFICATE_PASSWORD: ${{ secrets.MACOS_DEVID_CERTIFICATE_PASSWORD }}
        MACOS_NOTARIZE_APPLEID_USERNAME: ${{ secrets.MACOS_NOTARIZE_APPLEID_USERNAME }}
        MACOS_NOTARIZE_APPLEID_PASSWORD: ${{ secrets.MACOS_NOTARIZE_APPLEID_PASSWORD }}
        MACOS_NOTARIZE_TEAMID: ${{ secrets.MACOS_NOTARIZE_TEAMID }}
    - name: Generate DMG
      run: |
        cd build
        appdmg ../installer_macos/spec.json Play.dmg
    - name: Upload a Build Artifact dmg
      uses: actions/upload-artifact@v4
      with:
        name: Play_MacOS_dmg
        path: build/Play.dmg
    - name: Upload a Build Artifact libretro
      uses: actions/upload-artifact@v4
      with:
        name: Play_MacOS_libretro
        path: build/Source/ui_libretro/Release/play_libretro.dylib
    - name: Upload to S3
      if: ${{ env.AWS_ACCESS_KEY_ID != null}}
      run: |
        aws s3 cp build/Play.dmg s3://playbuilds/$SHORT_HASH/Play.dmg --acl public-read
        aws s3 cp build/Source/ui_libretro/Release/play_libretro.dylib s3://playbuilds/$SHORT_HASH/play_libretro_macOS-x86_64.dylib --acl public-read
      env:
        SHORT_HASH: ${{ steps.short_hash.outputs.VALUE }}
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_DEFAULT_REGION: 'us-east-2'

